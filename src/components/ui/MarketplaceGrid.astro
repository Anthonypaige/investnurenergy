---
import { twMerge } from 'tailwind-merge';
import type { Card } from '~/types'; // Import Card from types
import Button from './Button.astro';

const { items = [], columns, classes = {} } = Astro.props as { items: Card[], columns: number, classes: any };

const {
  container: containerClass = '',
  card: cardClass = '',
  title: titleClass = 'text-2xl font-bold text-white h-16',
  image: imageClass = 'w-full h-48 object-cover mb-4 rounded',
  topSellingPoints: topSellingPointsClass = 'text-lg text-white mb-1 truncate w-96',
  avgPrice: avgPriceClass = 'text-xl font-semibold mb-2 text-green-500',
  ribbon: ribbonClass = 'absolute top-0 left-0 text-white py-1 px-3 text-xs font-bold transform -rotate-45 ribbon'
} = classes;
---

<style>
  .ribbon {
    background: linear-gradient(to bottom right, transparent 50%, green 50%);
  }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

{
  items && (
    <div class={twMerge(`grid mx-auto gap-8 md:gap-y-12 ${columns === 4 ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2' : columns === 3 ? 'lg:grid-cols-3 sm:grid-cols-2' : columns === 2 ? 'sm:grid-cols-2' : ''}`, containerClass)}>
      {items.map(({ title, imageSrc, topSellingPoints, avgPrice, shopButton, rating, reviewCount, taxCode }) => (
        <div class={twMerge('relative flex flex-col max-w-md p-4 border rounded shadow-lg bg-gray-800 hover:bg-gray-700 hover:shadow-xl transition duration-300', cardClass)}>
          {/* Tax Code Ribbon */}
          {taxCode && (
            <div class={twMerge(ribbonClass)}>
              Tax Code: {taxCode}
            </div>
          )}
          {/* Product Title */}
          {title && (
            <h3 class={twMerge(titleClass, 'mb-2 text-center')}>{title}</h3>
          )}
          {/* Product Image */}
          {imageSrc && (
            <img src={imageSrc} alt={title} class={imageClass} />
          )}
          {/* Top Selling Points */}
          {topSellingPoints && topSellingPoints.map((point, index, array) => (
            <>
              <p class={twMerge(topSellingPointsClass, 'mb-1')}>â€¢ {point}</p>
              {index === array.length - 1 && <hr class="border-t border-gray-600 my-2" />}
            </>
          ))}
          <div class="flex justify-between items-center mt-2 mb-4">
            {avgPrice && (
              <div>
                <span class="text-white">Avg Price: </span>
                <span class={twMerge(avgPriceClass)}>{avgPrice}</span>
              </div>
            )}
          </div>
          <div class="flex justify-between items-center mt-auto">
            {shopButton && (
              <div>
                <Button variant="primary" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-200 transition duration-300" {...(shopButton as unknown as object)} />
              </div>
            )}
            {rating && reviewCount && (
              <div class="flex items-center">
                <span class="text-yellow-400 text-lg">
                  {Array.from({ length: 5 }, (_, i) => (
                    <i class={`fas fa-star ${i < rating ? 'text-yellow-400' : 'text-gray-300'}`}></i>
                  ))}
                </span>
                <span class="ml-2 text-white text-sm">{`${reviewCount} reviews`}</span>
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  )
}
