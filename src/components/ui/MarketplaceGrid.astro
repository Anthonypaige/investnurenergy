---
import { twMerge } from 'tailwind-merge';
import type { Card } from '~/types';
import Button from './Button.astro';

const { items = [], columns, classes = {} } = Astro.props as { items: Card[], columns: number, classes: any };

const {
  container: containerClass = '',
  card: cardClass = '',
  title: titleClass = 'text-2xl font-bold text-white h-16',
  image: imageClass = 'transition-transform duration-300 ease-in-out hover:scale-110 sale-90 w-full h-64 object-cover mb-4 rounded',
  topSellingPoints: topSellingPointsClass = 'text-lg text-white mb-1 truncate w-96',
  
  
  avgPrice: avgPriceClass = 'text-xl font-semibold mb-2 text-green-500',
  
} = classes;
---

<style>
  <style>
  .max-w-custom {
    max-width: 1100px;
    margin-left: auto;
    margin-right: auto;
  }

</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

{
  items && (
  <div class={twMerge(`grid gap-8 md:gap-y-12 max-w-custom ${columns === 4 ? 'lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2' : columns === 3 ? 'lg:grid-cols-3 sm:grid-cols-2' : columns === 2 ? 'sm:grid-cols-2' : ''}`, containerClass)}>
      {items.map(({ title, imageSrc, topSellingPoints, avgPrice, shopButton, rating, reviewCount, }) => (
        <div class={twMerge('card-hover relative flex flex-col max-w-sm p-4 border rounded shadow-lg bg-gray-800 hover:bg-gray-700 hover:shadow-xl transition duration-300', cardClass)}>
          {/* Product Title */}
          {title && (
            <h3 class={twMerge(titleClass, 'mb-2 text-center')}>{title}</h3>
          )}
        {/* Product Image */}
{imageSrc && (
<img src={imageSrc} alt={title} class={twMerge('transition-transform duration-300 ease-in-out hover:scale-105', imageClass)} loading="lazy" />
)}
{/* Top Selling Points */}
{topSellingPoints && topSellingPoints.map((point) => (
<p class={twMerge(topSellingPointsClass)}>
    <i class="fas fa-check text-green-500 mr-2"></i>{point}
  </p>
))}
<div class="flex justify-between items-center mt-2 mb-4">
{avgPrice && (
<div>
<span class="text-white">Avg Price: </span>
<span class={twMerge(avgPriceClass)}>{avgPrice}</span>
</div>
)}
{rating && reviewCount && (
 <div class="flex items-center">
  <span class="text-yellow-400 text-lg">
 {Array.from({ length: 5 }, (_, i) => (
  <i class={`fas fa-star ${i < rating ? 'text-yellow-400' : 'text-gray-300'}`}></i>
  ))}
                </span>
  <span class="ml-2 text-white text-sm">{`${reviewCount} reviews`}</span>
  </div>
  )}
 </div>
 <div class="flex justify-between items-center mt-auto">
  {shopButton && (
 <Button variant="primary" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-200 transition duration-300" {...(shopButton as unknown as object)} />
  )}
 <Button variant="secondary" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring--200 transition duration-300">
  Learn More
  </Button>
  </div>
</div>
))}
 </div>
  )
}
